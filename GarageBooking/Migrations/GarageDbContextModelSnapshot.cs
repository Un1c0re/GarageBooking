// <auto-generated />
using System;
using GarageBooking;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GarageBooking.Migrations
{
    [DbContext(typeof(GarageDbContext))]
    partial class GarageDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GarageBooking.Entities.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("UserId");

                    b.ToTable("events", (string)null);

                    b.HasDiscriminator<string>("type").HasValue("EventEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GarageBooking.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("GarageBooking.Entities.BookingEventEntity", b =>
                {
                    b.HasBaseType("GarageBooking.Entities.EventEntity");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasIndex("StartDate", "EndDate");

                    b.HasDiscriminator().HasValue("booking");
                });

            modelBuilder.Entity("GarageBooking.Entities.PaymentEventEntity", b =>
                {
                    b.HasBaseType("GarageBooking.Entities.EventEntity");

                    b.Property<Guid>("BookingEventId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("BookingEventId")
                        .IsUnique();

                    b.HasIndex("PayDate")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("payment");
                });

            modelBuilder.Entity("GarageBooking.Entities.EventEntity", b =>
                {
                    b.HasOne("GarageBooking.Entities.UserEntity", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GarageBooking.Entities.PaymentEventEntity", b =>
                {
                    b.HasOne("GarageBooking.Entities.BookingEventEntity", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("GarageBooking.Entities.PaymentEventEntity", "BookingEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("GarageBooking.Entities.UserEntity", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("GarageBooking.Entities.BookingEventEntity", b =>
                {
                    b.Navigation("Payment");
                });
#pragma warning restore 612, 618
        }
    }
}
